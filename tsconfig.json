{
  //　tsconfig.json:TSプロジェクトのルートディレクトリに配置。これによりTSコンパイラ・IDEがプロジェクト全体の設定を認識できるようになる
  // ts-node:TSのコードをコンパイルすることなく直接実行するためのNode.jsのためのツール；ts-nodeは、TypeScriptのコードを直接実行するためのツールです。TypeScriptはJavaScriptにトランスパイル（コンパイル）する必要がある言語ですが、ts-nodeを使用することで、このトランスパイルプロセスを明示的に行うことなく、TypeScriptのコードをNode.js環境で直接実行できるようになります。これは開発プロセスを大幅に簡略化し、テストやスクリプトの実行を迅速に行えるようにします。ts-nodeは内部でTypeScriptコンパイラを使用してコードをトランスパイルし、直ちにNode.jsで実行します。このプロセスは開発者にとって透明であり、開発者はTypeScriptコードを直接実行しているように感じることができます。
  // ts-nodeは主にNode.js環境で使用され、ブラウザのランタイムとは異なります。ブラウザでTypeScriptコードを実行する場合は、事前にJavaScriptにトランスパイルする必要がありますが、ts-nodeを使用するとNode.js環境で直接TypeScriptコードを実行できるため、開発プロセスが簡素化されます。ブラウザのランタイムではなく、サーバーサイドやツールの開発において特に便利です。
  // 【参考】nodejs:主にサーバサイドの開発のためのランタイム環境；Node.jsはJavaScriptをサーバーサイドで実行するためのランタイム環境ですが、フロントエンドのコードそのものを書くことはできます。ただし、Node.jsはブラウザでは動作せず、ブラウザで実行されるJavaScriptコード（フロントエンドコード）の開発には使われません。しかし、Node.jsはフロントエンド開発のツールチェーン（ビルドツール、パッケージマネージャーなど）を実行するために広く使用されています。
  "ts-node": {
    // require:ts-nodeを起動する際に事前に読み込むモジュールｙスクリプトを指定するオプション；ここで指定されたモジュールはts-ndoeが実行される前に自動的にロードされる
    "require": ["tsconfig-paths/register"] // tsconfig-paths/register:tsconfig.jsonファイル内で指定されたbaseUrlとpathsのエイリアス設定を、ts-node実行時に適用するためのモジュール、
    // sconfig.jsonでエイリアスパスを設定しても、通常はTypeScriptのコンパイル時にのみ解決されます。しかし、ts-nodeで直接実行する場合、この設定が適用されないため、実行時のパス解決に問題が生じることがあります。このモジュールを使用することで、実行時にもtsconfig.jsonのパスエイリアスが正しく解決されるようになります。
    // ts-nodeがtsconfigのpathsを解決できるようにする
  },
  "compilerOptions": {
    "outDir": "./dist", // コンパイルされたJSファイルが出力されるディレクトリの指定
    "strict": true, // 厳密な型チェックを有効にする
    "resolveJsonModule": true, // jsonファイルをimportすることを許可する
    "noUnusedLocals": true, // 使用されていないローカル変数がある場合エラー出力
    "noUnusedParameters": true, // 使用されていないパラメータがある場合エラー出力
    "baseUrl": "./", // tsconfig.jsonあフィルがおかれているディレクトリを基準としてモジュールのパス解決をするようにランタイムに指示；プロジェクトディレクトリ内のファイルの記述において、そのファイルからの相対パスではなく、プロジェクトディレクトリにおけるルートディレクトリ(tsconfig.jsonが置かれている場所)からの絶対パスでパス指定の記述を可能にすることで可読性を向上させる
    "paths": { "*": ["./src/*"] }, // baseUrlを基にしたモジュールのインポートパスをsrcディレクトリ下から解決できるようにしている
    "esModuleInterop": true // interop:interoperability;相互運用性の略、異なるモジュールシステム間でのコードの互換性や強調動作を可能にする機能や手法を提供。今回は、TSコード内で、JSのCommonJSのライブラリのインポートを可能にするためのメタデータとしての設定→TSにおけるモジュールシステム間ｄの相互運用性を改善するための設定
  },
  "include": ["src/**/*.ts", "src/**/*.js"], // コンパイルするファイルのパターンを指定、ここではsrcディレクトリ内のすべての.ts,.jsファイルが対象
  "exclude": ["node_modules"] // コンパイル対象から除外するファイルパターンを指定
}
// ☆メモ：ランタイムとは：プログラムが実行されるときの環境やその環境を提供するシステムのこと。例えば、JavaScriptのコードがブラウザで実行される場合、ブラウザのJavaScriptエンジンがランタイム環境を提供します。ランタイム環境は、コードの実行、メモリ管理、外部とのインタラクション（ファイル操作やネットワーク通信など）を可能にする機能を含んでいます。開発者は、特定のランタイム環境の特性や提供するAPIを理解することによって、その環境上で効率的に動作するアプリケーションを開発することができます。
// ランタイムはまた、コードが「どのように」実行されるかにも影響を与えます。例えば、コンパイル言語ではコードは実行前に機械語にコンパイルされますが、インタプリタ言語（JavaScriptなど）では、ランタイムがコードを直接読み込み、解釈して実行します。
